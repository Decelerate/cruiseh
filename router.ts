import {
  type Handler,
  HttpMethods,
  type Middleware,
  type MiddlewareOptions,
  type Route,
} from "./types.ts";

/**
 * Type representing a router middleware.
 * @property {Middleware} exec - The middleware function to be executed.
 * @property {MiddlewareOptions} [options] - Optional settings for the middleware.
 */
type RouterMiddleware = {
  exec: Middleware;
  options?: MiddlewareOptions;
};

/**
 * Router class
 * @class
 * @classdesc Router class to handle routes
 * @returns {Router}
 * @example
 * ```typescript
 * const router = new Router();
 * router.get("/hello", (request) => new Response("Hello world"));
 * ```
 */
export class Router {
  /**
   * Routes
   * @private
   * @type {Route[]}
   * @memberof Router
   */
  #routes: Route[] = [];

  /**
   * Middlewares
   * @private
   * @type {Middleware[]}
   * @memberof Router
   */
  #middlewares: RouterMiddleware[] = [];

  /**
   * Registers a middleware function to be executed before route handlers.
   * @param {Middleware} middleware - The middleware function to execute
   */
  use(middleware: Middleware, options?: MiddlewareOptions) {
    this.#middlewares.push({
      exec: middleware,
      options,
    });
  }

  /**
   * Registers a GET route with the specified path and handler.
   * @param {string} path - The path to match.
   * @param {Handler} handler - The handler to execute when the route is matched.
   */
  get(path: string, handler: Handler) {
    this.#addRoute(path, HttpMethods.GET, handler);
  }

  /**
   * Registers a POST route with the specified path and handler.
   * @param {string} path - The path to match.
   * @param {Handler} handler - The handler to execute when the route is matched.
   */
  post(path: string, handler: Handler) {
    this.#addRoute(path, HttpMethods.POST, handler);
  }

  /**
   * Registers a PUT route with the specified path and handler.
   * @param {string} path - The path to match.
   * @param {Handler} handler - The handler to execute when the route is matched.
   */
  put(path: string, handler: Handler) {
    this.#addRoute(path, HttpMethods.PUT, handler);
  }

  /**
   * Registers a DELETE route with the specified path and handler.
   * @param {string} path - The path to match.
   * @param {Handler} handler - The handler to execute when the route is matched.
   */
  delete(path: string, handler: Handler) {
    this.#addRoute(path, HttpMethods.DELETE, handler);
  }

  /**
   * Adds a route to the router.
   * @private
   * @param {string} path - The path to match.
   * @param {HttpMethods} method - The HTTP method to match.
   * @param {Handler} handler - The handler to execute when the route is matched.
   * This function creates a URL pattern from the provided path and stores the route information.
   */
  #addRoute(path: string, method: HttpMethods, handler: Handler) {
    const pattern = new URLPattern({
      pathname: path,
    });

    this.#routes.push({
      pattern,
      method,
      handler,
    });
  }

  /**
   * Handles incoming requests by matching them to the appropriate route.
   * @param {Request} request - The incoming request to handle.
   * @returns {Response} - The response generated by the matched route handler or an error response.
   */
  handler(request: Request): Response | Promise<Response> {
    const match = this.#routes.filter(
      (route) =>
        route.method === request.method && route.pattern.exec(request.url),
    )[0];

    if (match) {
      // Get all middlewares that match the path
      const middlewares = this.#middlewares.filter((middleware) => {
        if (!middleware.options?.path) return true;

        const patternMatch = match.pattern.pathname.startsWith(
          middleware.options.path,
        );
        const methodMatch = middleware.options.method
          ? middleware.options.method === request.method
          : true;

        return patternMatch && methodMatch;
      });

      const executeMiddleware = (
        index: number = 0,
      ): Response | Promise<Response> => {
        // Execute the middleware chain
        if (index < middlewares.length) {
          return middlewares[index].exec(
            request,
            () => executeMiddleware(index + 1),
          );
        } else {
          return match.handler(request, match.pattern.exec(request.url));
        }
      };

      try {
        return executeMiddleware();
      } catch (err) {
        console.error("Invalid body request", err);

        return new Response("Internal server error", {
          status: 500,
        });
      }
    }

    return new Response("Not found", { status: 404 });
  }
}
